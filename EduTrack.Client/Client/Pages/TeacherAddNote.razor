@page "/teacher-add-note"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
<h3>Not Ekle</h3>
<link href="css/lists.css" rel="stylesheet" />

@if (IsLoading)
{
    <p>Yükleniyor...</p>
}

<div class="mb-3">
    <label>Sınıf Seç:</label>
    <select class="form-select" @onchange="OnClassChanged">
        <option value="">Seçiniz...</option>
        @foreach (var c in Classes)
        {
            <option value="@c.Id">@c.ClassName</option>
        }
    </select>
</div>

@if (SelectedClassId.HasValue)
{
    <div class="mb-3">
        <label>Öğrenci Seç:</label>
        <select class="form-select" @bind="SelectedStudentId">
            <option value="">Seçiniz...</option>
            @foreach (var s in Students)
            {
                <option value="@s.Id">@s.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Ders Seç:</label>
        <select class="form-select" @bind="SelectedLessonId">
            <option value="">Seçiniz...</option>
            @foreach (var l in Lessons)
            {
                <option value="@l.Id">@l.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Not:</label>
        <input type="number" step="0.01" class="form-control" @bind="Score" />
    </div>

    <button class="btn btn-primary" @onclick="SubmitNote">Notu Ekle</button>
}

@if (Notes.Any())
{
    <h5>Not Listesi</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Öğrenci</th>
                <th>Ders</th>
                <th>Not</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var note in Notes)
            {
                <tr>
                    <td>@note.StudentName</td>
                    <td>@note.LessonName</td>
                    <td>@note.Score</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ClassDto> Classes = new();
    private List<StudentDto> Students = new();
    private List<LessonDto> Lessons = new();
    private List<NoteDto> Notes = new();

    private int? SelectedClassId;
    private int? SelectedStudentId;
    private int? SelectedLessonId;
    private float Score;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadClasses();
        IsLoading = false;
    }

    private async Task LoadClasses()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            Classes = await Http.GetFromJsonAsync<List<ClassDto>>("api/teachers/classes") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Sınıflar yüklenirken hata: {ex.Message}");
        }
    }

    private async Task OnClassChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int classId))
        {
            SelectedClassId = classId;
            await LoadStudentsAndLessons(classId);
        }
        else
        {
            SelectedClassId = null;
            Students.Clear();
            Lessons.Clear();
        }
    }
    private async Task LoadNotes(int classId)
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            Notes = await Http.GetFromJsonAsync<List<NoteDto>>($"api/teachers/class-notes/{classId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Notlar yüklenirken hata: {ex.Message}");
        }
    }

    private async Task LoadStudentsAndLessons(int classId)
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            Students = await Http.GetFromJsonAsync<List<StudentDto>>($"api/teachers/students/{classId}") ?? new();
            Lessons = await Http.GetFromJsonAsync<List<LessonDto>>($"api/teachers/lessons/{classId}") ?? new();
            await LoadNotes(classId); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Veriler yüklenirken hata: {ex.Message}");
        }
    }


    private async Task SubmitNote()
    {
        if (SelectedClassId.HasValue && SelectedStudentId.HasValue && SelectedLessonId.HasValue)
        {
            var noteRequest = new
            {
                StudentId = SelectedStudentId.Value,
                ClassId = SelectedClassId.Value,
                LessonId = SelectedLessonId.Value,
                Score = Score
            };

            try
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.PostAsJsonAsync("api/teachers/add-note", noteRequest);

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Not başarıyla eklendi.");
                    Score = 0;
                    SelectedStudentId = null;
                    SelectedLessonId = null;
                }
                if (SelectedClassId.HasValue)
                {
                    await LoadNotes(SelectedClassId.Value);
                }

                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Hata: {error}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Not eklenirken hata: {ex.Message}");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Lütfen tüm alanları doldurun.");
        }
    }

    public class ClassDto
    {
        public int Id { get; set; }
        public string ClassName { get; set; } = "";
    }

    public class StudentDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class LessonDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }
    public class NoteDto
    {
        public int StudentId { get; set; }
        public string StudentName { get; set; } = "";
        public string LessonName { get; set; } = "";
        public float Score { get; set; }
    }

}
