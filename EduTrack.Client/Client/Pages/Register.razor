@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Register> Logger

<PageTitle>Kayıt Ol - EduTrack</PageTitle>
<link href="css/layout.css" rel="stylesheet" />

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h3>Yeni Hesap Oluştur</h3>
            <p>Eğitim takip sistemine erişmek için kayıt olun</p>
        </div>

        <EditForm Model="@RegisterData" OnValidSubmit="@HandleRegister" class="auth-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            
            <div class="form-group">
                <label for="tcNo">TC Kimlik No</label>
                <InputText id="tcNo" @bind-Value="RegisterData.TcNo" class="form-control" placeholder="11 haneli giriniz" />
                <ValidationMessage For="@(() => RegisterData.TcNo)" />
            </div>

           
            <div class="form-group">
                <label for="name">İsim Soyisim</label>
                <InputText id="name" @bind-Value="RegisterData.Name" class="form-control" />
                <ValidationMessage For="@(() => RegisterData.Name)" />
            </div>

           
            <div class="form-group">
                <label for="role">Hesap Türü</label>
                <InputSelect id="role" @bind-Value="RegisterData.Role" @onchange="OnRoleChanged" class="form-control">
                    <option value="">Seçiniz...</option>
                    <option value="Student">Öğrenci</option>
                    <option value="Teacher">Öğretmen</option>
                    <option value="Idare">İdare</option>
                </InputSelect>
                <ValidationMessage For="@(() => RegisterData.Role)" />
            </div>

           
            @if (RegisterData.Role == "Student")
            {
                <div class="form-group">
                    <label for="schoolNumber">Okul Numarası</label>
                    <InputText id="schoolNumber" @bind-Value="RegisterData.SchoolNumber" class="form-control" />
                    <ValidationMessage For="@(() => RegisterData.SchoolNumber)" />
                </div>
            }

            @if (RegisterData.Role == "Teacher")
            {
                <div class="form-group">
                    <label for="phoneNumber">Telefon Numarası</label>
                    <InputText id="phoneNumber" @bind-Value="RegisterData.PhoneNumber" class="form-control" placeholder="0555 123 45 67" />
                    <ValidationMessage For="@(() => RegisterData.PhoneNumber)" />
                </div>
            }

            
            <div class="form-group">
                <label for="school">Okul Seçin</label>
                <InputSelect id="school" @bind-Value="SelectedSchoolId" @onchange="OnSchoolChanged" class="form-control">
                    <option value="">Bir okul seçin...</option>
                    @foreach (var school in Schools)
                    {
                        <option value="@school.Id">@school.Name</option>
                    }
                </InputSelect>
                @if (SelectedSchoolId == null)
                {
                    <div class="text-danger">Okul seçimi zorunludur</div>
                }
                @if (!string.IsNullOrEmpty(SchoolAdminWarning))
                {
                    <div class="text-warning">@SchoolAdminWarning</div>
                }
            </div>

          
            <div class="form-group">
                <label for="password">Şifre</label>
                <InputText id="password" type="password" @bind-Value="RegisterData.Password" class="form-control" />
                <ValidationMessage For="@(() => RegisterData.Password)" />
            </div>

            
            <div class="form-group">
                <label for="confirmPassword">Şifre Tekrar</label>
                <InputText id="confirmPassword" type="password" @bind-Value="ConfirmPassword" class="form-control" />
                @if (RegisterData.Password != ConfirmPassword && !string.IsNullOrEmpty(ConfirmPassword))
                {
                    <div class="text-danger">Şifreler uyuşmuyor</div>
                }
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@IsLoading">
                @(IsLoading ? "Kayıt Olunuyor..." : "Kayıt Ol")
            </button>
        </EditForm>

        <div class="auth-footer">
            Zaten hesabınız var mı? <a href="/login">Giriş Yapın</a>
        </div>

        @if (ShowAlert)
        {
            <div class="alert @AlertCssClass">
                @AlertMessage
            </div>
        }
    </div>
</div>

@code {
    private RegisterModel RegisterData = new();
    private string ConfirmPassword = "";
    private bool IsLoading = false;
    private bool ShowAlert = false;
    private string AlertMessage = "";
    private string AlertCssClass => IsSuccess ? "alert-success" : "alert-danger";
    private bool IsSuccess = false;
    private int? SelectedSchoolId;
    private List<SchoolDto> Schools = new();

    private bool SchoolHasAdmin = false;
    private string SchoolAdminWarning = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Schools = await Http.GetFromJsonAsync<List<SchoolDto>>("api/school") ?? new();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Okul listesi yüklenemedi");
        }
    }

    private async Task OnSchoolChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int schoolId) && RegisterData.Role == "Idare")
        {
            SelectedSchoolId = schoolId;

            try
            {
                var response = await Http.GetFromJsonAsync<HasAdminResponse>($"api/auth/hasadmin/{schoolId}");
                SchoolHasAdmin = response?.HasAdmin ?? false;

                SchoolAdminWarning = SchoolHasAdmin
                    ? "Bu okulda zaten bir idare hesabı mevcut. Yeni idare hesabı açılamaz."
                    : "";
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Okul idare kontrolü hatası");
                SchoolAdminWarning = "Okul kontrolü yapılamadı.";
            }
        }
        else
        {
            SelectedSchoolId = null;
            SchoolHasAdmin = false;
            SchoolAdminWarning = "";
        }
    }

    private void OnRoleChanged(ChangeEventArgs e)
    {
        RegisterData.Role = e.Value?.ToString() ?? "";
        SelectedSchoolId = null;
        SchoolHasAdmin = false;
        SchoolAdminWarning = "";
    }

    private async Task HandleRegister()
    {
        try
        {
            IsLoading = true;
            ShowAlert = false;

            if (RegisterData.Password != ConfirmPassword)
            {
                AlertMessage = "Şifreler uyuşmuyor!";
                ShowAlert = true;
                IsSuccess = false;
                return;
            }

            if (RegisterData.Role == "Idare" && SchoolHasAdmin)
            {
                AlertMessage = "Seçilen okulda zaten bir idare hesabı var, yeni idare açamazsınız.";
                ShowAlert = true;
                IsSuccess = false;
                return;
            }

            var requestModel = new RegisterRequest
            {
                TcNo = RegisterData.TcNo,
                Name = RegisterData.Name,
                Role = RegisterData.Role,
                Password = RegisterData.Password,
                SchoolNumber = RegisterData.SchoolNumber,
                PhoneNumber = RegisterData.PhoneNumber,
                SchoolId = SelectedSchoolId
            };

            var response = await Http.PostAsJsonAsync("api/auth/register", requestModel);

            if (response.IsSuccessStatusCode)
            {
                AlertMessage = "Kayıt başarılı! Giriş sayfasına yönlendiriliyorsunuz...";
                ShowAlert = true;
                IsSuccess = true;
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Register error: {response.StatusCode} - {errorContent}");

                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                    AlertMessage = errorObj?.message ?? $"Kayıt hatası: {response.StatusCode}";
                }
                catch
                {
                    AlertMessage = $"Kayıt hatası: {response.StatusCode} - {errorContent}";
                }

                ShowAlert = true;
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            AlertMessage = $"Bağlantı hatası: {ex.Message}";
            ShowAlert = true;
            IsSuccess = false;
            Logger.LogError(ex, "Register exception");
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "TC Kimlik No gerekli")]
        [StringLength(11, MinimumLength = 11, ErrorMessage = "TC Kimlik No 11 haneli olmalı")]
        public string TcNo { get; set; } = "";

        [Required(ErrorMessage = "İsim Soyisim gerekli")]
        [StringLength(100, ErrorMessage = "İsim Soyisim maksimum 100 karakter olabilir")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Rol seçimi gerekli")]
        public string Role { get; set; } = "";

        [Required(ErrorMessage = "Şifre gerekli")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Şifre en az 6 karakter olmalı")]
        public string Password { get; set; } = "";

        public string? SchoolNumber { get; set; }
        public string? PhoneNumber { get; set; }
    }

    public class SchoolDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class HasAdminResponse
    {
        public bool HasAdmin { get; set; }
    }

    public class RegisterRequest
    {
        public string TcNo { get; set; } = "";
        public string Name { get; set; } = "";
        public string Role { get; set; } = "";
        public string Password { get; set; } = "";
        public string? SchoolNumber { get; set; }
        public string? PhoneNumber { get; set; }
        public int? SchoolId { get; set; }
    }

    public class ErrorResponse
    {
        public string message { get; set; } = "";
    }
}
